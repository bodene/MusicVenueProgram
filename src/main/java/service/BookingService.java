package service;

import dao.BookingDAO;
import model.Event;
import model.Venue;

import java.sql.SQLException;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The {@code BookingService} class provides methods for handling booking operations
 * related to events and venues.
 * <p>
 * This class contains static methods that encapsulate the logic for booking a single venue
 * for an event as well as performing bulk bookings based on recommendations generated by the
 * {@link VenueMatchingService}. The actual booking operation is delegated to the {@link BookingDAO},
 * while session details (such as the current user) are obtained via the {@link service.SessionManager}.
 * </p>
 * <p>
 * <strong>Key Methods:</strong>
 * <ul>
 *   <li>{@link #bookVenue(Event, Venue)} - Books a single venue for a given event.</li>
 *   <li>{@link #bulkBookRecommendations(List)} - Performs bulk booking for a list of recommended matches,
 *       returning a mapping of each event to the success status of its booking.</li>
 * </ul>
 * </p>
 *
 * @author  Bodene Downie
 * @version 1.0
 */
public class BookingService {

    /**
     * Books a single venue for an event.
     *
     * @param event the event for which to book the venue
     * @param venue the venue to book
     * @return true if booking is successful; false otherwise
     * @throws SQLException if there is a database error during booking
     */
    public static boolean bookVenue(Event event, Venue venue) throws SQLException {
        LocalDate bookingDate = LocalDate.now();
        String bookingStatus = "CONFIRMED";
        String bookedBy = SessionManager.getInstance().getCurrentUser().getUsername();

        // Delegate booking to the DAO.
        return BookingDAO.bookVenue(
                bookingDate,
                bookingStatus,
                event.getEventId(),
                venue.getVenueId(),
                event.getClientId(),
                bookedBy
        );
    }

    /**
     * Performs bulk booking for a list of recommended matches.
     *
     * @param recommendations a list of recommendations (with candidate venues)
     * @return a map with each event and a boolean indicating if the booking was successful
     */
    public static Map<Event, Boolean> bulkBookRecommendations(List<VenueMatchingService.AutoMatchResult> recommendations) {
        Map<Event, Boolean> bookingResults = new HashMap<>();
        for (VenueMatchingService.AutoMatchResult result : recommendations) {
            if (result.candidate != null) {
                try {
                    boolean success = bookVenue(result.event, result.candidate.venue);
                    bookingResults.put(result.event, success);
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    bookingResults.put(result.event, false);
                }
            } else {
                bookingResults.put(result.event, false);
            }
        }
        return bookingResults;
    }
}
